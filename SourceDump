cource = '"Start" Course team temmo'
print(cource[0:-5])
print(cource[0:])
print(cource[0:1])
print(cource[0:0]) # empty line from zero up to and not including zero
print(cource[1:1]) # empty line from 1 up to and not including 1
print(cource[0:5])
name = "Lucy"
print (len(cource))
text = f'print this text {cource} and then print name {name}'
print(text)
print(cource.find("o"))
print(cource.lower())
print(cource.upper())
print(cource.find("d"))
print(cource.replace("t","T",2))
def emoji_picker(message):
    words = message.split(" ")
    emojis = {
        ":)" : "😊",
        ":(" : "😒",
        ":D":"😁",
        ":/":"🤔",
        ";)": "😉" ,
        ":|":"😐️"

    }
    output = ""
    for word in words:
        output += emojis.get(word,word) + " "
    return output


info = input ("-->")

print(emoji_picker(info))

try:
    age = int(input("Age "))
    income = 22000
    print(age)
    risk = income / age
except ValueError:
    print(" Invalid value")
except ZeroDivisionError:
    print("Age cannot be zero")

    class Mammal:
    def __init__(self, name):
        self.name = name  # can be any type no type checking

    def run(self):
        print(f"{self.name} runs")

    def eat(self):
        print(f"{self.name} eats")

    def jump(self):
        print(f"{self.name} jumps")


class Dog(Mammal):
    def bark(self):
        print(f"{self.name} barks")


class Cat(Mammal):
    def meow(self):
        print(f"{self.name} meows")


dogJoe = Dog("Joe")
catRee = Cat("Ree")
dogJoe.food = "pedegree"
catRee.food = "whiskas"
dogJoe.age = 2
catRee.age = 3
dogJoe.bark()
catRee.meow()

catRee.run()
dogJoe.jump()
print(catRee.food)
print(catRee.age)
print(dogJoe.food)
print(dogJoe.age)
import converters
from converters import emoji_picker
from utils import find_max
import ecommerce.shipping
from ecommerce.shipping import calc_shipping
from ecommerce import shipping

print(converters.kg_to_lbs(119))

print(emoji_picker("Aha nice :) good function"))

numbers = [2, 4, 10, 13, 8, 20, 17]

print(find_max(numbers))
ecommerce.shipping.calc_shipping()
calc_shipping()

shipping.calc_shipping()
